"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  describeVariation: () => import_loader_splits2.describeVariation,
  generateAllPaths: () => generateAllPaths,
  generateAllPathsWithTraits: () => generateAllPathsWithTraits,
  getActiveVariation: () => getActiveVariation,
  getMiddlewareResponse: () => getMiddlewareResponse,
  rewriteWithTraits: () => rewriteWithTraits,
  rewriteWithoutTraits: () => rewriteWithoutTraits
});
module.exports = __toCommonJS(src_exports);
var import_loader_splits2 = require("@plasmicapp/loader-splits");

// src/variation.ts
var import_loader_splits = require("@plasmicapp/loader-splits");
var DELIMITER = "__pm__";
var PLASMIC_SEED = "plasmic_seed";
var DEFAULT_PLASMIC_SEED_RANGE = 16;
var getSeed = (seedRange = DEFAULT_PLASMIC_SEED_RANGE) => {
  return `${Math.floor(Math.random() * seedRange)}`;
};
var rewriteWithoutTraits = (url) => {
  const [path, ...traitssArr] = url.split(DELIMITER);
  const traits = traitssArr.reduce((acc, elem) => {
    const [key, value] = elem.split("=");
    return __spreadProps(__spreadValues({}, acc), {
      [key]: value
    });
  }, {});
  return {
    path: path === "/" ? path : path.endsWith("/") ? path.substring(0, path.length - 1) : path,
    traits
  };
};
var expandTraits = (traits) => {
  const cmp = (a, b) => {
    return a < b ? -1 : a > b ? 1 : 0;
  };
  return Object.keys(traits).sort(cmp).map((key) => `${DELIMITER}${key}=${traits[key]}`).join("");
};
var rewriteWithTraits = (path, traits) => {
  if (Object.keys(traits).length === 0) {
    return path;
  }
  return `${path}${path.endsWith("/") ? "" : "/"}${expandTraits(traits)}`;
};
var generateAllPaths = (path, seedRange = DEFAULT_PLASMIC_SEED_RANGE) => {
  return generateAllPathsWithTraits(path, {}, seedRange);
};
function generateAllPathsWithTraits(path, traitValues = {}, seedRange = DEFAULT_PLASMIC_SEED_RANGE) {
  const traitsCombinations = [{}];
  traitsCombinations.push(
    ...Array(seedRange).fill(0).map((_, idx) => ({
      [PLASMIC_SEED]: idx
    }))
  );
  for (const [trait, possibleValues] of Object.entries(traitValues)) {
    const newCombinations = [];
    for (const traitValue of possibleValues) {
      for (const combination of traitsCombinations) {
        newCombinations.push(__spreadProps(__spreadValues({}, combination), {
          [trait]: traitValue
        }));
      }
    }
    traitsCombinations.push(...newCombinations);
  }
  return traitsCombinations.map((traits) => rewriteWithTraits(path, traits));
}
var getMiddlewareResponse = (opts) => {
  const newCookies = [];
  const seedRange = Number.isInteger(opts.seedRange) ? opts.seedRange : DEFAULT_PLASMIC_SEED_RANGE;
  const seed = opts.cookies[PLASMIC_SEED] || getSeed(seedRange);
  let traits = opts.traits;
  if (seedRange && seedRange > 0) {
    traits = __spreadProps(__spreadValues({}, traits), {
      [PLASMIC_SEED]: seed
    });
    if (!opts.cookies[PLASMIC_SEED]) {
      newCookies.push({
        key: PLASMIC_SEED,
        value: seed
      });
    }
  }
  return {
    pathname: rewriteWithTraits(opts.path, traits),
    cookies: newCookies
  };
};
var getActiveVariation = (opts) => {
  const { splits, traits, path, enableUnseededExperiments } = opts;
  return (0, import_loader_splits.getActiveVariation)({
    splits,
    traits: __spreadValues({
      pageUrl: path
    }, traits),
    enableUnseededExperiments,
    getKnownValue: () => void 0,
    updateKnownValue: () => null,
    getRandomValue: (key) => {
      var _a;
      const rand = (0, import_loader_splits.getSeededRandomFunction)(((_a = traits[PLASMIC_SEED]) != null ? _a : "") + key);
      return rand();
    }
  });
};
//# sourceMappingURL=index.js.map
