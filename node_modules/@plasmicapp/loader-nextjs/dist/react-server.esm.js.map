{
  "version": 3,
  "sources": ["../src/react-server.tsx", "../src/cache.ts", "../src/server-require.ts"],
  "sourcesContent": ["import \"server-only\";\n\nimport {\n  InternalPlasmicComponentLoader,\n  PlasmicComponentLoader,\n} from \"@plasmicapp/loader-react/react-server\";\nimport type { IncomingMessage, ServerResponse } from \"http\";\nimport NextHead from \"next/head.js\";\nimport NextLink from \"next/link.js\";\nimport * as NextRouter from \"next/router.js\";\nimport { initPlasmicLoaderWithCache } from \"./cache\";\nimport type { NextInitOptions } from \"./shared-exports\";\n\nimport { __EXPERMIENTAL__extractPlasmicQueryData as internalExtractPlasmicQueryData } from \"@plasmicapp/loader-react/react-server\";\nimport { ExtractPlasmicQueryData } from \"@plasmicapp/nextjs-app-router\";\nimport {\n  fetchExtractedHeadMetadata,\n  fetchExtractedQueryData,\n  withPlasmicMetadata,\n} from \"@plasmicapp/nextjs-app-router/react-server\";\n\nexport * from \"./shared-exports\";\nexport {\n  fetchExtractedQueryData as __EXPERMIENTAL__fetchExtractedQueryData,\n  fetchExtractedHeadMetadata as __EXPERMIENTAL__fetchExtractedHeadMetadata,\n  withPlasmicMetadata as __EXPERMIENTAL__withPlasmicMetadata,\n};\n\nimport React from \"react\";\nimport type * as ClientExports from \".\";\n\ntype ServerRequest = IncomingMessage & {\n  cookies: {\n    [key: string]: string;\n  };\n};\n\nexport class NextJsPlasmicComponentLoader extends PlasmicComponentLoader {\n  constructor(internal: InternalPlasmicComponentLoader) {\n    super(internal);\n  }\n\n  async getActiveVariation(opts: {\n    req?: ServerRequest;\n    res?: ServerResponse;\n    known?: Record<string, string>;\n    traits: Record<string, string | number | boolean>;\n  }) {\n    const extractBuiltinTraits = () => {\n      const url = new URL(\n        opts.req?.url ?? \"/\",\n        `https://${opts.req?.headers.host ?? \"server.side\"}`\n      );\n      return {\n        pageUrl: url.href,\n      };\n    };\n\n    return this._getActiveVariation({\n      traits: {\n        ...extractBuiltinTraits(),\n        ...opts.traits,\n      },\n      getKnownValue: (key: string) => {\n        if (opts.known) {\n          return opts.known[key];\n        } else {\n          return opts.req?.cookies[`plasmic:${key}`] ?? undefined;\n        }\n      },\n      updateKnownValue: (key: string, value: string) => {\n        if (opts.res) {\n          const cookie = `plasmic:${key}=${value}`;\n          const resCookie = opts.res?.getHeader(\"Set-Cookie\") ?? [];\n          let newCookies: string[] = [];\n          if (Array.isArray(resCookie)) {\n            newCookies = [...resCookie, `plasmic:${key}=${value}`];\n          } else {\n            newCookies = [`${resCookie}`, cookie];\n          }\n\n          opts.res?.setHeader(\"Set-Cookie\", newCookies);\n        }\n      },\n    });\n  }\n}\n\nexport function initPlasmicLoader(opts: NextInitOptions) {\n  const loader = initPlasmicLoaderWithCache<NextJsPlasmicComponentLoader>(\n    (opts) =>\n      new PlasmicComponentLoader(new InternalPlasmicComponentLoader(opts)),\n    opts\n  );\n  loader.registerModules({\n    \"next/head\": NextHead,\n    \"next/link\": NextLink,\n    \"next/router\": NextRouter,\n  });\n  if (opts.nextNavigation) {\n    loader.registerModules({\n      \"next/navigation\": opts.nextNavigation,\n    });\n  }\n  return loader;\n}\n\nexport const __EXPERMIENTAL__extractPlasmicQueryData: (\n  element: React.ReactElement,\n  // We can't use `NextJsPlasmicComponentLoader` or `PlasmicComponentLoader`\n  // types because they refer to the react-server version, which Typescript\n  // doesn't recognize as compatible with the client version (whose type is\n  // also the one exported from `react-server-conditional` imports).\n  loader: ClientExports.NextJsPlasmicComponentLoader\n) => Promise<Record<string, any>> = internalExtractPlasmicQueryData as any;\n\n/**\n * Helper function to extract Plasmic data.\n *\n * Given the <PlasmicClientRootProvider> element and current pathname + search\n * params, returns:\n * - The extracted query data, if `plasmicSsr` search param is set\n * - A copy of the root provider element with the extracted query data, otherwise\n */\nexport async function __EXPERMIENTAL__withExtractPlasmicQueryData(\n  plasmicRootProvider: React.ReactElement,\n  {\n    pathname,\n    searchParams,\n  }: {\n    pathname: string;\n    searchParams: Record<string, string | string[]> | undefined;\n  }\n) {\n  const isPlasmicSsr =\n    !!searchParams?.[\"plasmicSsr\"] && searchParams?.[\"plasmicSsr\"] !== \"false\";\n\n  // If `plasmicSsr` search param is set, just wrap the root provider inside\n  // <ExtractPlasmicQueryData>\n  if (isPlasmicSsr) {\n    return (\n      <ExtractPlasmicQueryData>{plasmicRootProvider}</ExtractPlasmicQueryData>\n    );\n  }\n\n  // Otherwise, fetch the same endpoint, but setting `plasmicSsr` to extract the\n  // query data.\n  const prepassHost =\n    process.env.PLASMIC_PREPASS_HOST ??\n    (process.env.VERCEL_URL && `https://${process.env.VERCEL_URL}`) ??\n    `http://localhost:${process.env.PORT ?? 3000}`;\n\n  // Build a copy of the search params\n  const newSearchParams = new URLSearchParams(\n    Object.entries(searchParams ?? {}).flatMap(([key, values]) =>\n      Array.isArray(values) ? values.map((v) => [key, v]) : [[key, values]]\n    )\n  );\n\n  // Set `plasmicSsr` search param to indicate you are using this endpoint\n  // to extract query data.\n  newSearchParams.set(\"plasmicSsr\", \"true\");\n\n  if (process.env.VERCEL_AUTOMATION_BYPASS_SECRET) {\n    // If protection bypass is enabled, use it to ensure fetching from\n    // the SSR endpoint will not return the authentication page HTML\n    newSearchParams.set(\n      \"x-vercel-protection-bypass\",\n      process.env.VERCEL_AUTOMATION_BYPASS_SECRET\n    );\n  }\n\n  // Fetch the data from the endpoint using the new search params\n  const prefetchedQueryData = await fetchExtractedQueryData(\n    `${prepassHost}${pathname}?${newSearchParams.toString()}`\n  );\n\n  // Provide the query data to <PlasmicClientRootProvider>\n  return React.cloneElement(plasmicRootProvider, {\n    prefetchedQueryData,\n  });\n}\n", "import { LoaderBundleOutput } from \"@plasmicapp/loader-core\";\nimport type { InitOptions } from \"@plasmicapp/loader-react/react-server-conditional\";\nimport type * as Watcher from \"@plasmicapp/watcher\";\nimport { PHASE_PRODUCTION_BUILD } from \"next/constants\";\nimport path from \"path\";\nimport { serverRequire, serverRequireFs } from \"./server-require\";\nimport type { NextInitOptions } from \"./shared-exports\";\n\nclass FileCache {\n  constructor(private filePath: string) {}\n\n  async get() {\n    const fs = await serverRequireFs();\n    try {\n      await fs.promises.mkdir(path.dirname(this.filePath), { recursive: true });\n      const data = (await fs.promises.readFile(this.filePath)).toString();\n      return JSON.parse(data);\n    } catch {\n      return undefined;\n    }\n  }\n\n  async set(data: LoaderBundleOutput) {\n    const fs = await serverRequireFs();\n    try {\n      await fs.promises.writeFile(this.filePath, JSON.stringify(data));\n    } catch (err) {\n      console.warn(`Error writing to Plasmic cache: ${err}`);\n    }\n  }\n\n  async clear() {\n    const fs = await serverRequireFs();\n    try {\n      await fs.promises.unlink(this.filePath);\n    } catch (err) {\n      // noop\n    }\n  }\n}\n\nfunction hashString(str: string) {\n  let h = 0,\n    i = 0;\n  for (; i < str.length; h &= h) h = 31 * h + str.charCodeAt(i++);\n  return Math.abs(h);\n}\n\nfunction makeCache(opts: InitOptions) {\n  const cacheDir = path.resolve(process.cwd(), \".next\", \".plasmic\");\n  const cachePath = path.join(\n    cacheDir,\n    `plasmic-${hashString(\n      [...opts.projects.map((p) => `${p.id}@${p.version ?? \"\"}`)]\n        .sort()\n        .join(\"-\")\n    )}${opts.preview ? \"-preview\" : \"\"}-cache.json`\n  );\n  return new FileCache(cachePath);\n}\n\nexport function initPlasmicLoaderWithCache<\n  T extends {\n    clearCache(): void;\n  }\n>(\n  initFn: (opts: InitOptions) => T,\n  { nextNavigation, ...opts }: NextInitOptions\n): T {\n  const isBrowser = typeof window !== \"undefined\";\n  const isProd = process.env.NODE_ENV === \"production\";\n  const isBuildPhase = process.env.NEXT_PHASE === PHASE_PRODUCTION_BUILD;\n  const cache = isBrowser || isProd ? undefined : makeCache(opts);\n  const loader = initFn({\n    onClientSideFetch: \"warn\",\n    ...opts,\n    cache,\n    platform: \"nextjs\",\n    platformOptions: {\n      nextjs: {\n        appDir: !!nextNavigation,\n      },\n    },\n    // For Nextjs 12, revalidate may in fact re-use an existing instance\n    // of PlasmicComponentLoader that's already in memory, so we need to\n    // make sure we don't re-use the data cached in memory.\n    // We also enforce this for dev mode, so that we don't have to restart\n    // the dev server, in case getStaticProps() re-uses the same PlasmicComponentLoader\n    // We also enforce that during build phase, we re-use the data cached in memory\n    // to avoid re-fetching the data from Plasmic servers.\n    alwaysFresh: !isBuildPhase && !isBrowser,\n  });\n\n  if (!isProd) {\n    const stringOpts = JSON.stringify(opts);\n\n    if (process.env.PLASMIC_OPTS && process.env.PLASMIC_OPTS !== stringOpts) {\n      console.warn(\n        `PLASMIC: We detected that you created a new PlasmicLoader with different configurations. You may need to restart your dev server.\\n`\n      );\n    }\n\n    process.env.PLASMIC_OPTS = stringOpts;\n  }\n\n  if (cache) {\n    if (!isProd) {\n      if (process.env.PLASMIC_WATCHED !== \"true\") {\n        (async () => {\n          process.env.PLASMIC_WATCHED = \"true\";\n          console.log(`Subscribing to Plasmic changes...`);\n\n          // Import using serverRequire, so webpack doesn't bundle us into client bundle\n          try {\n            const PlasmicRemoteChangeWatcher = (\n              await serverRequire<typeof Watcher>(\"@plasmicapp/watcher\")\n            ).PlasmicRemoteChangeWatcher;\n            const watcher = new PlasmicRemoteChangeWatcher({\n              projects: opts.projects,\n              host: opts.host,\n            });\n\n            const clearCache = () => {\n              cache.clear();\n              loader.clearCache();\n            };\n\n            watcher.subscribe({\n              onUpdate: () => {\n                if (opts.preview) {\n                  clearCache();\n                }\n              },\n              onPublish: () => {\n                if (!opts.preview) {\n                  clearCache();\n                }\n              },\n            });\n          } catch (e) {\n            console.warn(\"Couldn't subscribe to Plasmic changes\", e);\n          }\n        })();\n      }\n    } else {\n      cache.clear();\n      loader.clearCache();\n    }\n  }\n  return loader;\n}\n", "import type * as FS from \"fs\";\n\nlet secretRequire: ((module: string) => any) | undefined;\ntry {\n  // Secretly use require/import without webpack knowing\n  // eslint-disable-next-line\n  secretRequire = eval(\"require\");\n} catch (err) {\n  try {\n    // eslint-disable-next-line\n    secretRequire = eval(\"(module) => import(module)\");\n  } catch (err) {\n    secretRequire = undefined;\n  }\n}\n\nexport async function serverRequire<T>(module: string): Promise<T> {\n  if (!secretRequire) {\n    throw new Error(\n      `Unexpected serverRequire() -- can only do this from a Node server!`\n    );\n  }\n  return secretRequire(module) as Promise<T>;\n}\n\nexport async function tryServerRequire<T>(\n  module: string\n): Promise<T | undefined> {\n  try {\n    const require = await serverRequire<T>(module);\n    return require;\n  } catch {\n    return undefined;\n  }\n}\n\nexport async function tryServerRequires<T>(\n  modules: string[]\n): Promise<T | undefined> {\n  for (const module of modules) {\n    const require = await tryServerRequire<T>(module);\n    if (require != null) {\n      return require;\n    }\n  }\n  return undefined;\n}\n\nexport async function serverRequireFs() {\n  return serverRequire<typeof FS>(\"fs\");\n}\n"],
  "mappings": "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",
  "names": ["err", "require", "err", "opts"]
}
