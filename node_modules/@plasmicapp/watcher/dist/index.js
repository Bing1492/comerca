"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PlasmicRemoteChangeWatcher: () => PlasmicRemoteChangeWatcher
});
module.exports = __toCommonJS(src_exports);

// src/watcher.ts
var import_socket = __toESM(require("socket.io-client"));
var PlasmicRemoteChangeWatcher = class {
  constructor(opts) {
    this.opts = opts;
    this.watchers = [];
    this.socket = void 0;
    var _a;
    this.host = (_a = opts.host) != null ? _a : "https://studio.plasmic.app";
  }
  subscribe(watcher) {
    this.watchers.push(watcher);
    this.ensureWatch();
    return () => {
      this.unsubscribe(watcher);
    };
  }
  unsubscribe(watcher) {
    const index = this.watchers.indexOf(watcher);
    if (index >= 0) {
      this.watchers.splice(index, 1);
      if (this.watchers.length === 0 && this.socket) {
        this.socket.disconnect();
        this.socket = void 0;
      }
    }
  }
  connectSocket() {
    return __async(this, null, function* () {
      const socket = (0, import_socket.default)(this.host, {
        path: `/api/v1/socket`,
        transportOptions: {
          polling: {
            extraHeaders: this.makeAuthHeaders()
          }
        }
      });
      return socket;
    });
  }
  makeAuthHeaders() {
    const tokens = this.opts.projects.map((p) => `${p.id}:${p.token}`).join(",");
    return {
      "x-plasmic-api-project-tokens": tokens
    };
  }
  ensureWatch() {
    return __async(this, null, function* () {
      if (this.socket) {
        return;
      }
      if (this.watchers.length === 0) {
        return;
      }
      const socket = this.socket = yield this.connectSocket();
      socket.on("initServerInfo", () => {
        socket.emit("subscribe", {
          namespace: "projects",
          projectIds: this.opts.projects.map((p) => p.id)
        });
      });
      socket.on("error", (data) => {
        console.error(`${(/* @__PURE__ */ new Date()).toISOString()}: Encountered error ${data}`);
        this.watchers.forEach((watcher) => {
          var _a;
          return (_a = watcher.onError) == null ? void 0 : _a.call(watcher, data);
        });
        socket.disconnect();
        this.socket = void 0;
      });
      socket.on("update", (data) => __async(this, null, function* () {
        console.log(
          `${(/* @__PURE__ */ new Date()).toISOString()}: Project ${data.projectId} updated to revision ${data.revisionNum}`
        );
        this.watchers.forEach(
          (watcher) => {
            var _a;
            return (_a = watcher.onUpdate) == null ? void 0 : _a.call(watcher, data.projectId, data.revisionNum);
          }
        );
      }));
      socket.on("publish", (data) => __async(this, null, function* () {
        console.log(
          `${(/* @__PURE__ */ new Date()).toISOString()}: Project ${data.projectId} updated to version ${data.version}`
        );
        this.watchers.forEach(
          (watcher) => {
            var _a;
            return (_a = watcher.onPublish) == null ? void 0 : _a.call(watcher, data.projectId, data.version);
          }
        );
      }));
    });
  }
};
//# sourceMappingURL=index.js.map
