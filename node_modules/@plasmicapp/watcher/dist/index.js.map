{
  "version": 3,
  "sources": ["../src/index.ts", "../src/watcher.ts"],
  "sourcesContent": ["export { PlasmicRemoteChangeWatcher } from \"./watcher\";\nexport type { PlasmicRemoteChangeListener } from \"./watcher\";\n", "import socketio from \"socket.io-client\";\n\nexport interface PlasmicRemoteChangeListener {\n  onUpdate?: (projectId: string, revision: number) => void;\n  onPublish?: (projectId: string, version: string) => void;\n  onError?: (data: any) => void;\n}\n\nexport class PlasmicRemoteChangeWatcher {\n  private watchers: PlasmicRemoteChangeListener[] = [];\n  private socket: ReturnType<typeof socketio> | undefined = undefined;\n  private host: string;\n\n  constructor(\n    private opts: {\n      projects: { id: string; token: string }[];\n      host?: string;\n    }\n  ) {\n    this.host = opts.host ?? \"https://studio.plasmic.app\";\n  }\n\n  subscribe(watcher: PlasmicRemoteChangeListener) {\n    this.watchers.push(watcher);\n    this.ensureWatch();\n    return () => {\n      this.unsubscribe(watcher);\n    };\n  }\n\n  unsubscribe(watcher: PlasmicRemoteChangeListener) {\n    const index = this.watchers.indexOf(watcher);\n    if (index >= 0) {\n      this.watchers.splice(index, 1);\n      if (this.watchers.length === 0 && this.socket) {\n        this.socket.disconnect();\n        this.socket = undefined;\n      }\n    }\n  }\n\n  private async connectSocket() {\n    const socket = socketio(this.host, {\n      path: `/api/v1/socket`,\n      transportOptions: {\n        polling: {\n          extraHeaders: this.makeAuthHeaders(),\n        },\n      },\n    });\n    return socket;\n  }\n\n  private makeAuthHeaders() {\n    const tokens = this.opts.projects\n      .map((p) => `${p.id}:${p.token}`)\n      .join(\",\");\n    return {\n      \"x-plasmic-api-project-tokens\": tokens,\n    };\n  }\n\n  private async ensureWatch() {\n    if (this.socket) {\n      return;\n    }\n\n    if (this.watchers.length === 0) {\n      return;\n    }\n\n    const socket = (this.socket = await this.connectSocket());\n    socket.on(\"initServerInfo\", () => {\n      socket.emit(\"subscribe\", {\n        namespace: \"projects\",\n        projectIds: this.opts.projects.map((p) => p.id),\n      });\n    });\n\n    socket.on(\"error\", (data: any) => {\n      console.error(`${new Date().toISOString()}: Encountered error ${data}`);\n      this.watchers.forEach((watcher) => watcher.onError?.(data));\n      socket.disconnect();\n      this.socket = undefined;\n    });\n\n    socket.on(\"update\", async (data: any) => {\n      console.log(\n        `${new Date().toISOString()}: Project ${\n          data.projectId\n        } updated to revision ${data.revisionNum}`\n      );\n      this.watchers.forEach((watcher) =>\n        watcher.onUpdate?.(data.projectId, data.revisionNum)\n      );\n    });\n\n    socket.on(\"publish\", async (data: any) => {\n      console.log(\n        `${new Date().toISOString()}: Project ${\n          data.projectId\n        } updated to version ${data.version}`\n      );\n      this.watchers.forEach((watcher) =>\n        watcher.onPublish?.(data.projectId, data.version)\n      );\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAAqB;AAQd,IAAM,6BAAN,MAAiC;AAAA,EAKtC,YACU,MAIR;AAJQ;AALV,SAAQ,WAA0C,CAAC;AACnD,SAAQ,SAAkD;AAV5D;AAmBI,SAAK,QAAO,UAAK,SAAL,YAAa;AAAA,EAC3B;AAAA,EAEA,UAAU,SAAsC;AAC9C,SAAK,SAAS,KAAK,OAAO;AAC1B,SAAK,YAAY;AACjB,WAAO,MAAM;AACX,WAAK,YAAY,OAAO;AAAA,IAC1B;AAAA,EACF;AAAA,EAEA,YAAY,SAAsC;AAChD,UAAM,QAAQ,KAAK,SAAS,QAAQ,OAAO;AAC3C,QAAI,SAAS,GAAG;AACd,WAAK,SAAS,OAAO,OAAO,CAAC;AAC7B,UAAI,KAAK,SAAS,WAAW,KAAK,KAAK,QAAQ;AAC7C,aAAK,OAAO,WAAW;AACvB,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EAEc,gBAAgB;AAAA;AAC5B,YAAM,aAAS,cAAAA,SAAS,KAAK,MAAM;AAAA,QACjC,MAAM;AAAA,QACN,kBAAkB;AAAA,UAChB,SAAS;AAAA,YACP,cAAc,KAAK,gBAAgB;AAAA,UACrC;AAAA,QACF;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAAA;AAAA,EAEQ,kBAAkB;AACxB,UAAM,SAAS,KAAK,KAAK,SACtB,IAAI,CAAC,MAAM,GAAG,EAAE,MAAM,EAAE,OAAO,EAC/B,KAAK,GAAG;AACX,WAAO;AAAA,MACL,gCAAgC;AAAA,IAClC;AAAA,EACF;AAAA,EAEc,cAAc;AAAA;AAC1B,UAAI,KAAK,QAAQ;AACf;AAAA,MACF;AAEA,UAAI,KAAK,SAAS,WAAW,GAAG;AAC9B;AAAA,MACF;AAEA,YAAM,SAAU,KAAK,SAAS,MAAM,KAAK,cAAc;AACvD,aAAO,GAAG,kBAAkB,MAAM;AAChC,eAAO,KAAK,aAAa;AAAA,UACvB,WAAW;AAAA,UACX,YAAY,KAAK,KAAK,SAAS,IAAI,CAAC,MAAM,EAAE,EAAE;AAAA,QAChD,CAAC;AAAA,MACH,CAAC;AAED,aAAO,GAAG,SAAS,CAAC,SAAc;AAChC,gBAAQ,MAAM,IAAG,oBAAI,KAAK,GAAE,YAAY,wBAAwB,MAAM;AACtE,aAAK,SAAS,QAAQ,CAAC,YAAS;AAjFtC;AAiFyC,+BAAQ,YAAR,iCAAkB;AAAA,SAAK;AAC1D,eAAO,WAAW;AAClB,aAAK,SAAS;AAAA,MAChB,CAAC;AAED,aAAO,GAAG,UAAU,CAAO,SAAc;AACvC,gBAAQ;AAAA,UACN,IAAG,oBAAI,KAAK,GAAE,YAAY,cACxB,KAAK,iCACiB,KAAK;AAAA,QAC/B;AACA,aAAK,SAAS;AAAA,UAAQ,CAAC,YAAS;AA5FtC;AA6FQ,iCAAQ,aAAR,iCAAmB,KAAK,WAAW,KAAK;AAAA;AAAA,QAC1C;AAAA,MACF,EAAC;AAED,aAAO,GAAG,WAAW,CAAO,SAAc;AACxC,gBAAQ;AAAA,UACN,IAAG,oBAAI,KAAK,GAAE,YAAY,cACxB,KAAK,gCACgB,KAAK;AAAA,QAC9B;AACA,aAAK,SAAS;AAAA,UAAQ,CAAC,YAAS;AAvGtC;AAwGQ,iCAAQ,cAAR,iCAAoB,KAAK,WAAW,KAAK;AAAA;AAAA,QAC3C;AAAA,MACF,EAAC;AAAA,IACH;AAAA;AACF;",
  "names": ["socketio"]
}
